{
  "Start Quiz": [
    { "MC": [
      { "id": 0, "Question": "What is an incomplete binary tree?", "Answer": 0,
       "Choices": [
         { "id": 0, "Answer": "A parent node only have a right child node" },
         { "id": 1, "Answer": "Each parent node have two child nodes" },
         { "id": 2, "Answer": "A parent node only have a left child node" },
         { "id": 3, "Answer": "Both A and B" }
       ], "Note": "This is because a binary tree is incomplete if a parent node only have a right child node. If a binary tree only have a left child node, then it is a complete binary tree."},
      { "id": 1, "Question": "In python, how do you get the last element of an array that have a size of 5?", "Answer": 2,
       "Choices": [
         { "id": 0, "Answer": "array[-3]" },
         { "id": 1, "Answer": "array[0]" },
         { "id": 2, "Answer": "array[-1]" },
         { "id": 3, "Answer": "array[len(array)]" }
       ], "Note": "This is because in python, using a negative number will not go out of bounds, but instead points to the end of the array and go backwards from there."},
      { "id": 2, "Question": "In a worst-case scenario, which of these Big O notation have the most complexity?", "Answer": 1,
       "Choices": [
         { "id": 0, "Answer": "O(n)" },
         { "id": 1, "Answer": "O(2^n)" },
         { "id": 2, "Answer": "O(1)" },
         { "id": 3, "Answer": "O(n^10)" }
       ], "Note": "This is because we are considering a worst-case scenario, which means that 'n' must be very large. Since 'n' must be large then O(2^n) or 'y = 2^n' will result in a larger value than the other notations."},
      { "id": 3, "Question": "Which of the following is the correct way to create a dictionary in C#?", "Answer": 0,
       "Choices": [
         { "id": 0, "Answer": "Dictionary<string, int> example = new Dictionary<string, int>();" },
         { "id": 1, "Answer": "Dictionary example = new Hashtable();" },
         { "id": 2, "Answer": "example = {}" },
         { "id": 3, "Answer": "example[element] = sample" }
       ], "Note": "A dictionary uses a key/value pairs, in this case the key is a string while the value is an integer. Further informations on dictionary in C# can be found in the documentation provided by Microsoft."},
      { "id": 4, "Question": "Which is a function expression in javascript?", "Answer": 3,
       "Choices": [
         { "id": 0, "Answer": "var expression = () =>{//code}" },
         { "id": 1, "Answer": "function expression(){//code}" },
         { "id": 2, "Answer": "var expression = 'function';" },
         { "id": 3, "Answer": "var expression = function(){//code}" }
       ], "Note": "A function expression is when a function is assigned to an expression (or variable)."},
      { "id": 5, "Question": "A program uses a for-loop to iterate through each element in an array of size N. What is the Big O notation in a worst-case scenario?", "Answer": 2,
       "Choices": [
         { "id": 0, "Answer": "O(1)" },
         { "id": 1, "Answer": "O(N^2)" },
         { "id": 2, "Answer": "O(N)" },
         { "id": 3, "Answer": "O(logN)" }
       ], "Note": "Since the program will iterate through each element of the given array, this means the for-loop will execute N-times, where 'N' is the size of the given array."},
      { "id": 6, "Question": "A java program have a line of code that divides a number by 0. What error will this cause?", "Answer": 3,
       "Choices": [
         { "id": 0, "Answer": "IncompatibleTypes" },
         { "id": 1, "Answer": "ArrayIndexOutOfBoundsException" },
         { "id": 2, "Answer": "NullPointerException" },
         { "id": 3, "Answer": "ArithmeticException" }
       ], "Note": "This is because it is not possible to divide a number by 0."},
       { "id": 7, "Question": "John wishes to create a database that stores a person's name, SSN, DOB, and occupation. Which of these should be a primary key?", "Answer": 1,
        "Choices": [
         { "id": 0, "Answer": "Name" },
         { "id": 1, "Answer": "SSN" },
         { "id": 2, "Answer": "DOB" },
         { "id": 3, "Answer": "Occupation" }
       ], "Note": "A primary key in a database must be unique as that is how each row is identified. This means that using 'SSN' as a primary key is the best option as the SSN of each person must be unique."}
      ]
    },
    
    { "Image": [
      { "id": 0, "Question": "What is the outcome?", "Image": "Image1.png", "Answer": 3,
        "Choices": [
         { "id": 0, "Answer": "5" },
         { "id": 1, "Answer": "0" },
         { "id": 2, "Answer": "20" },
         { "id": 3, "Answer": "10" }
       ], "Note": "The variable 'number' will be incremented by 'x' and 'x' will always increase until it does not fit the condition in the for-loop. This is what the expression would look, 0 + 1 + 2 + 3 + 4"},
      { "id": 1, "Question": "What is the Big O notation?", "Image": "Image2.png", "Answer": 0,
        "Choices": [
         { "id": 0, "Answer": "O(N^2)" },
         { "id": 1, "Answer": "O(NlogN)" },
         { "id": 2, "Answer": "O(1)" },
         { "id": 3, "Answer": "O(N^3)" }
       ], "Note": "The first for-loop will execute 5 times, or 'N' times. But during each execution, there is also another for-loop that also executes 5 times, or 'N' times. So a program that executes a for-loop, which have an execution time of 'N' times, for 'N' times equates to N*N or N^2."},
      { "id": 2, "Question": "Given this BST, where will '15' be when inserted?", "Image": "Image3.png", "Answer": 0,
        "Choices": [
         { "id": 0, "Answer": "Left child node of 16" },
         { "id": 1, "Answer": "Left child node of 18" },
         { "id": 2, "Answer": "Right child node of 3" },
         { "id": 3, "Answer": "Left child node of 14" }
       ], "Note": "15 is less than 17, so it goes to the left subtree, where 7 is located. But 15 is greater than 7, so it goes to the right subtree, where 14 is located. 15 is also greater than 14, so it goes to the right subtree, where 16 is located. 15 is less than 16, so it goes to the left subtree. Since no nodes are there, 15 becomes the left child node of 16."},
      { "id": 3, "Question": "In python, what will be printed?", "Image": "Image4.png", "Answer": 2,
        "Choices": [
         { "id": 0, "Answer": "1 + 5 + hello" },
         { "id": 1, "Answer": "{x} + y + {z}" },
         { "id": 2, "Answer": "1 + y + 2" },
         { "id": 3, "Answer": "x + y + z" }
       ], "Note": "In python, each of those variables will be assigned a value in that same order. So x=1, y=5, and z='hello'. Each variables can also be changed to a different value type, so it is possible for variable 'z' to now have the value '2'. In the format shown in the print function, only the variables inside the curly brackets will share its value."}
      ]
    },

    { "TF": [
      { "id": 0, "Question": "A java expression statement must end with a semicolon", "Answer": 0,
      "Note": "All java expression must end with a semicolon."},
      { "id": 1, "Question": "Max-heap is where the child node is greater than the parent node", "Answer": 1, 
      "Note": "In max-heap, the parent node must be equal or greater than the child node. It's in min-heap where the parent node is less than or equal to its children."},
      { "id": 2, "Question": "A set does not allow duplicates", "Answer": 0,
      "Note": "Each element in a set must be unique."},
      { "id": 3, "Question": "A queue is 'First In First Out'", "Answer": 0,
      "Note": "A queue can be seen as a line in a store, where the first person will get the service first."},
      { "id": 4, "Question": "In python, 'else if' is a valid syntax", "Answer": 1,
      "Note": "Python does not use 'else if' but rather 'elif'"}
      ]
    },

    { "Lists": [
      { "id": 0, "Frag1": "Assuming a parent node have two children in BST, the right child node is ", "Frag2": " left child node", "Answer": 0,
        "Choices": [
         { "id": 0, "Answer": "greater than" },
         { "id": 1, "Answer": "less than" }
       ], "Note": "The left child node will be less than the parent node, while the right child will be greater than the parent node. This means that the right child node must be greater than the left child node."},
      { "id": 1, "Frag1": "O(", "Frag2": ") have the least complexity", "Answer": 3,
        "Choices": [
         { "id": 0, "Answer": "N" },
         { "id": 1, "Answer": "logN" },
         { "id": 2, "Answer": "N^3" },
         { "id": 3, "Answer": "1" }
       ], "Note": "O(1) will have the least complexity when 'N' is large"},
      { "id": 2, "Frag1": "The data structure ", "Frag2": " allows duplicate", "Answer": 1,
        "Choices": [
         { "id": 0, "Answer": "Set" },
         { "id": 1, "Answer": "List" },
         { "id": 2, "Answer": "Map" }
       ], "Note": "A set does not allow duplicates, and each key in a map must be unique. This leaves list as the data structure that allows duplicate values"}
      ]
    }
  ]
}
